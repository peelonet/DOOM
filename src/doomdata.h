// Emacs style mode select   -*- C++ -*-
//-----------------------------------------------------------------------------
//
// $Id:$
//
// Copyright (C) 1993-1996 by id Software, Inc.
//
// This source is available for distribution and/or modification
// only under the terms of the DOOM Source Code License as
// published by id Software. All rights reserved.
//
// The source is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// FITNESS FOR A PARTICULAR PURPOSE. See the DOOM Source Code License
// for more details.
//
// DESCRIPTION:
//  all external data is defined here
//  most of the data is loaded into different structures at run time
//  some internal structures shared by many modules are here
//
//-----------------------------------------------------------------------------

#ifndef __DOOMDATA__
#define __DOOMDATA__

// Some global defines, that configure the game.
#include "doomdef.h"

//
// Map level types.
// The following data structures define the persistent format
// used in the lumps of the WAD files.
//

// Lump order in a map WAD: each map needs a couple of lumps
// to provide a complete scene geometry description.
enum
{
  ML_LABEL,   // A separator, name, ExMx or MAPxx
  ML_THINGS,    // Monsters, items..
  ML_LINEDEFS,    // LineDefs, from editing
  ML_SIDEDEFS,    // SideDefs, from editing
  ML_VERTEXES,    // Vertices, edited and BSP splits generated
  ML_SEGS,    // LineSegs, from LineDefs split by BSP
  ML_SSECTORS,    // SubSectors, list of LineSegs
  ML_NODES,   // BSP nodes
  ML_SECTORS,   // Sectors, from editing
  ML_REJECT,    // LUT, sector-sector visibility
  ML_BLOCKMAP   // LUT, motion clipping, walls/grid element
};

/**
 * A single vertex.
 */
typedef struct
{
  int16_t x;
  int16_t y;
} MapVertex;

/**
 * A SideDef, defining the visual appearance of a wall, by setting textures
 * and offsets.
 */
typedef struct
{
  int16_t textureoffset;
  int16_t rowoffset;
  char    toptexture[8];
  char    bottomtexture[8];
  char    midtexture[8];
  /** Front sector, towards viewer. */
  int16_t sector;
} MapSideDef;

/**
 * A LineDef, as used for editing, and as input to the BSP builder.
 */
typedef struct
{
  int16_t v1;
  int16_t v2;
  int16_t flags;
  int16_t special;
  int16_t tag;
  // sidenum[1] will be -1 if one sided.
  int16_t sidenum[2];
} MapLineDef;

/**
 * LineDef attributes.
 */
typedef enum
{
  /** Solid, is an obstacle. */
  ML_BLOCKING = 1,
  /** Blocks monsters only. */
  ML_BLOCKMONSTERS = 2,
  /** Backside will not be present at all if not two sided. */
  ML_TWOSIDED = 4,

  // If a texture is pegged, the texture will have the end exposed to air held
  // constant at the top or bottom of the texture (stairs or pulled down
  // things) and will move with a height change of one of the neighbor sectors.
  //
  // Unpegged textures always have the first row of the texture at the top
  // pixel of the line for both top and bottom textures (use next to windows).
  //

  /** Upper texture unpegged. */
  ML_DONTPEGTOP = 8,
  /** Lower texture unpegged. */
  ML_DONTPEGBOTTOM = 16,
  /** In AutoMap: Don't map as two sided: IT'S A SECRET! */
  ML_SECRET = 32,
  /** Sound rendering: Don't let sound cross two of these. */
  ML_SOUNDBLOCK = 64,
  /** Don't draw on the automap at all. */
  ML_DONTDRAW = 128,
  /** Set if already seen, thus drawn in automap. */
  ML_MAPPED = 256
} MapLineDefAttribute;

/**
 * Sector definition, from editing.
 */
typedef struct
{
  int16_t floorheight;
  int16_t ceilingheight;
  char    floorpic[8];
  char    ceilingpic[8];
  int16_t lightlevel;
  int16_t special;
  int16_t tag;
} MapSector;

/**
 * SubSector, as generated by BSP.
 */
typedef struct
{
  int16_t numsegs;
  /** Index of first one, segs are stored sequentially. */
  int16_t firstseg;
} MapSubSector;

/**
 * LineSeg, generated by splitting LineDefs using partition lines selected by
 * BSP builder.
 */
typedef struct
{
  int16_t v1;
  int16_t v2;
  int16_t angle;
  int16_t linedef;
  int16_t side;
  int16_t offset;
} MapSeg;

// BSP node structure.

// Indicate a leaf.
#define NF_SUBSECTOR  0x8000

typedef struct
{
  // Partition line from (x,y) to x+dx,y+dy.
  int16_t x;
  int16_t y;
  int16_t dx;
  int16_t dy;

  /** Bounding box for each child, clip against view frustum. */
  int16_t bbox[2][4];

  /** If NF_SUBSECTOR it's a subsector, else it's a node of another subtree. */
  uint16_t children[2];
} MapNode;

/**
 * Thing definition, position, orientation and type, plus skill/visibility
 * flags and attributes.
 */
typedef struct
{
  int16_t x;
  int16_t y;
  int16_t angle;
  int16_t type;
  int16_t options;
} MapThing;

#endif      // __DOOMDATA__
